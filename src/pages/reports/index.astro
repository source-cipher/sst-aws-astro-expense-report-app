---
import Header from '../../components/Header.astro';
import Layout from '../../layouts/Layout.astro';
import type { ExpenseReport } from '../../shared/ExpenseReport';

let reportsResponse;

try {
  reportsResponse = await fetch(`${import.meta.env.PUBLIC_EXPENSE_REPORT_API}/reports`);
  reportsResponse = await reportsResponse.json();
} catch (error) {
  console.error(error);
}

const lastEvaluatedKey = (reportsResponse as any)?.lastEvaluatedKey;
const reports: ExpenseReport[] = (reportsResponse as any)?.items || [];
---

<Layout title="Expense Reports">
  <Header></Header>
  <div class="m-4 rounded-md gap-2 flex flex-col bg-slate-700 drop-shadow-md">
    <div class="flex justify-between m-2">
      <h1 class="text-3xl font-bold text-white">Expense Reports</h1>
      <button id="add-report" class="drop-shadow-md rounded-md p-1 px-3 bg-emerald-600 text-white hover:bg-emerald-700">Add Report</button>
    </div>
    <table id="expense-report-table" class="flex flex-col">
      <thead class="p-2 uppercase bg-slate-600 text-slate-400">
        <tr class="grid grid-cols-2 text-left">
          <th>name</th>
        </tr>
      </thead>
      <tbody class="rounded-br-md rounded-bl-md">
        {
          reports.map((report) => (
            <tr id={report.id} class="t-body-row grid grid-cols-2 text-left p-2 hover:bg-slate-800 hover:cursor-pointer">
              <td class="text-slate-200">{report.name}</td>
            </tr>
          ))
        }
        {
          !reports.length && (
            <tr class="grid p-2">
              <td class="text-slate-200 text-center">No reports</td>
            </tr>
          )
        }
      </tbody>
    </table>
    {
      lastEvaluatedKey && (
        <load-more class="text-center" data-lastevaluatedkey={JSON.stringify(lastEvaluatedKey)}>
          <button id="load-more-button"class="drop-shadow-md rounded-md p-1 px-3 m-2 bg-slate-600 text-white hover:bg-slate-800">Load More</button>
        </load-more>
      )
    }
  </div>
</Layout>

<script>
  const rowButtons = document.querySelectorAll('tr.t-body-row');
  const addReportButton = document.getElementById('add-report');

  addReportButton?.addEventListener('click', () => {
    window.location.assign('reports/add');
  });

  rowButtons.forEach((button) => {
    button.addEventListener('click', () => {
      window.location.assign(`reports/${button.id}/expenses`);
    });
  });

  class LoadMore extends HTMLElement {
    connectedCallback() {
      const loadMoreButton = document.getElementById('load-more-button');
      const table = document.getElementById('expense-report-table');

      loadMoreButton?.addEventListener('click', async () => {
        const lastEvaluatedKey = this.dataset.lastevaluatedkey || '';
        let reportsResponse = await fetch(`${import.meta.env.PUBLIC_EXPENSE_REPORT_API}/reports?lastEvaluatedKey=${encodeURIComponent(lastEvaluatedKey)}`);
        reportsResponse = await reportsResponse.json();

        this.dataset.lastevaluatedkey = JSON.stringify((reportsResponse as any)?.lastEvaluatedKey);

        if (!(reportsResponse as any).lastEvaluatedKey) {
          this?.remove();
        }

        const newReports: any[] = (reportsResponse as any)?.items || [];
        const newRows: HTMLTableRowElement[] = newReports.map((report) => {
          let tr = document.createElement('tr');
          tr.className = 't-body-row grid grid-cols-2 text-left p-2 hover:bg-slate-800 hover:cursor-pointer';
          tr.id = report.id;
          tr.innerHTML = `<td class="text-slate-200">${report.name}</td>`;

          tr.addEventListener('click', () => {
            window.location.assign(`reports/${report.id}/expenses`);
          });

          return tr;
        });

        table?.append(...newRows);
      });
    }
  }

  customElements.define('load-more', LoadMore);
</script>